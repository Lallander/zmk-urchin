/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "keymap_french.h"


// Layer definitions
#define BASE 0
#define SYM 1
#define EXT 2
#define FNC 3
#define SYM2 4
#define ACCENT 5
#define SETTINGS 6
// -----------------
// Majuscules accentu√©es
 #define TAPHOLD_SYMBOL(NAME, TAP, HOLD) \
         NAME: NAME { \
            compatible = "zmk,behavior-hold-tap"; \
            label = ZMK_MACRO_STRINGIFY(NAME); \
            #binding-cells = <2>; \
            tapping-term-ms = <200>; \
            flavor = "tap-preferred"; \
            quick-tap-ms = <200>; \
            bindings = <HOLD>, <TAP>; \
        };			
&sk {
	// don't release mods on other mods presses
	ignore-modifiers;
};


/ {
	behaviors {
		// Enables holding the first mod-tap key
		// by performing a tap-release-hold sequence.
		// To use it: "&qt KEYCODE1 KEYCODE2"
		qt: quick_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "QUICK_TAP";
			#binding-cells = <2>;
			flavor = "hold-preferred";
			tapping-term-ms = <200>;
			quick-tap-ms = <200>;
			bindings = <&kp>, <&kp>;
		};
		aMgrav: aMgrav { \
            compatible = "zmk,behavior-hold-tap"; \
            label = "aMgrav"; \
            #binding-cells = <2>; \
            tapping-term-ms = <200>; \
            flavor = "tap-preferred"; \
            quick-tap-ms = <200>; \
            bindings =&a_M_grav , &kp FR_AGRV; \
        };
	};

	macros {
		// sometimes my device thinks a modifier is being held down
		// pressing all modifiers fixes it.
		unstick: unstick {
			label = "ZM_unstick";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
		};
		a_circ: a_circ {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_press   &kp LALT>
    		, <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N6>
    		, <&macro_release &kp LALT>
    		;
		};
		e_circ: e_circ {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_press   &kp LALT>
    		, <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N4>
    		, <&macro_release &kp LALT>
    		;																	
		};
		e_trem: e_trem {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_press   &kp LALT>
    		, <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N5>
    		, <&macro_release &kp LALT>
    		;
		};
		u_circ: u_circ {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_press   &kp LALT>
    		, <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N1>
    		, <&macro_release &kp LALT>
    		;
		};
		i_circ: i_circ {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_press   &kp LALT>
    		, <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N8>
    		, <&macro_release &kp LALT>
    		;
		};
		i_trem: i_trem {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_press   &kp LALT>
    		, <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N9>
    		, <&macro_release &kp LALT>
    		;
		};
		o_circ: o_circ {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_press   &kp LALT>
    		, <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N4>
    		, <&macro_release &kp LALT>
    		;
		};
		
		a_M_grav: a_M_grav {
			compatible = "zmk,behavior-macro"; 
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_press   &kp LALT>
    		, <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N2>
    		, <&macro_release &kp LALT>
    		;
		};
		
	};

    
    /*
	symbols {
        TAPHOLD_SYMBOL(aMgrav,&kp FR_AGRV,&a_M_grav )
        
        };
		*/
	combos {
		compatible = "zmk,combos";
		// both right thumb keys
		combo_accent {
			timeout-ms = <200>;
			key-positions = <32 33>;
			bindings = <&mo ACCENT>;
		};
		// internal-left & external-right thumb keys
		combo_sym2 {
			timeout-ms = <200>;
			key-positions = <31 33>;
			bindings = <&mo SYM2>;
		};
		// both left thumb keys
		combo_settings {
			timeout-ms = <200>;
			key-positions = <30 31>;
			bindings = <&mo SETTINGS>;
		};
		// left index & middle fingers (home-row)
		// hold control & space for Adobe workflow
		combo_ctrl_space {
			timeout-ms = <200>;
			key-positions = <12 13>;
			bindings = <&kp SPACE>;
			layers = <BASE>;
		};
	};

	keymap {
		compatible = "zmk,keymap";
		// Base alpha layer
		default_layer {
			label = "Base";
			bindings = <
			&qt LS(FR_Q) FR_Q &qt LS(FR_C) FR_C &qt LS(FR_O) FR_O &qt LS(FR_P) FR_P &qt LS(FR_W) FR_W           &qt LS(FR_J) FR_J &qt LS(FR_M) FR_M  &qt LS(FR_D) FR_D     &qt FR_DQUO FR_QUOT   &qt LS(FR_Y) FR_Y 
			&qt LS(FR_A) FR_A &qt LS(FR_S) FR_S &qt LS(FR_E) FR_E &qt LS(FR_N) FR_N &qt LS(FR_F) FR_F           &qt LS(FR_L) FR_L &qt LS(FR_R) FR_R  &qt LS(FR_T) FR_T     &qt LS(FR_I) FR_I   &qt LS(FR_U) FR_U
			&qt LS(FR_Z) FR_Z &qt LS(FR_X) FR_X &qt FR_QUES FR_MINS &qt LS(FR_V) FR_V &qt LS(FR_B) FR_B           &qt FR_COLN FR_DOT &qt LS(FR_H) FR_H  &qt LS(FR_G) FR_G  &qt FR_SCLN FR_COMM    &qt LS(FR_K) FR_K
							           &mo EXT  &qt LSHIFT SPACE   &sl ACCENT &sl SYM
			>;
		};

		// Numbers and high frequency symbols
		sym_layer {
			label = "Sym.";
			bindings = <
			&kp FR_1 &kp FR_2 &kp FR_3 &kp FR_4 &kp FR_5			&kp FR_6 &kp FR_7 &kp FR_8 &kp FR_9 &kp FR_0
			&none &none &kp FR_PND &kp FR_GRV &kp FR_CIRC  			&none &kp FR_PERC &kp FR_PLUS &kp FR_ASTR &none
			&none &none &kp FR_TILD &kp FR_LPRN &kp FR_RPRN	 		&none &kp FR_EQL &kp FR_MINS &kp FR_SLSH &kp FR_BSLS
													&mo FNC  &mo SYM2   	&trans &trans
			>;
		};

		// Main modifiers and arrow keys
		ext_layer {
			label = "Mods";
			bindings = <
			&kp ESC  &none 	&none &none &none    						&kp PG_UP  &kp HOME &kp UP &kp END &kp CAPS
			&sk LALT &sk LGUI  &sk LSHIFT  &sk LCTRL  &sk RALT 			&kp PG_DN &kp LEFT  &kp DOWN  &kp RIGHT   &kp DEL
			&kp LC(FR_Z)  &kp LC(X) &kp LC(C) &kp LC(V) &kp TAB          &kp LC(BSPC) &kp BSPC &none &none &none
													&trans &kp LCTRL    &kp ENTER  &mo FNC 
			>;
		};

		// Function keys with modifiers
		fnc_layer {
			label = "FRow";
			bindings = <
			&kp F1 &kp F2 &kp F3 &kp F4 &kp F5                  		&kp F6 &kp F7 &kp F8 &kp F9 &kp F10 
			&sk LALT &sk LGUI &sk LSHIFT &sk LCTRL &sk RALT     		&kp F11 &kp F12  &none &kp LC(HOME) &kp LC(PG_DN)
			&kp PRINTSCREEN &none &kp C_PREV &kp C_PP  &kp C_NEXT		&kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP &none &kp LC(PG_UP)
							  							&none &none     &none &none  
			>;
		};

		// Low frequency symbols.
		symbols_2_layer {
			label = "Sym.2";
			bindings = <
			&none &none &none &none &none        &none &none &none &none &none 
			&none &none &none &none &none        &none &none &none &none &none
			&none &none &none &none &none		 &none &none &none &none &none
							&none &none        &none &none 
			>;
		};

		// Used to type regional accents.
		accent_layer {
			label = "Accent";
			bindings = <
			&a_circ &kp FR_CCED &none &o_circ  &kp FR_EURO                &kp FR_HASH  &kp FR_DLR &kp FR_AMPR &kp FR_EXLM &u_circ 
			&aMgrav 0 0 &kp FR_EACU &kp FR_EGRV &e_circ &e_trem 		  &kp FR_PIPE &kp FR_UNDS &i_circ &i_trem &kp FR_UGRV
			&none &kp FR_LABK  &kp FR_RABK &kp FR_LPRN &kp FR_RPRN        &kp FR_LBRC &kp FR_RBRC &kp FR_LCBR &kp FR_RCBR &kp FR_AT
									&none &none                         &none &none 
			>;
		};

		// Used to change the keyboard's settings.
		settings_layer {
				label = "Sett.";
				bindings = <
				&bootloader &none &none &bt BT_CLR &bt BT_SEL 0               &bt BT_SEL 3 &none &unstick &none &bootloader 
				&none &none &none &none      &bt BT_SEL 1 						  &bt BT_SEL 4 &none &none &none &none
				&none &none &none &none      &bt BT_SEL 2               &bt BT_SEL 5 &none &none &none &none
										&none &none                         &none &none 
				>;
		};
	};
};

/*
NOT USED
a_trem: a_trem {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_press   &kp LALT>
    		, <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N8>
    		, <&macro_release &kp LALT>
    		;
		};
o_trem: o_trem {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_press   &kp LALT>
    		, <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N6>
    		, <&macro_release &kp LALT>
    		;
		};
u_trem: u_trem {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_press   &kp LALT>
    		, <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N2>
    		, <&macro_release &kp LALT>
    		;
		};
*/