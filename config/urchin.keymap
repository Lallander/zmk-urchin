/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

// Layer definitions

#define BASE 0

// -----------------

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
};

/ {
    macros {
        // sometimes my device thinks a modifier is being held down
        // pressing all modifiers fixes it.
    };

    combos {
        compatible = "zmk,combos";

        combo_cword {
            bindings = <&caps_word>;
            key-positions = <13 16>;
            timeout-ms = <50>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <1 2>;
            timeout-ms = <50>;
        };

        combo_del {
            bindings = <&kp DEL>;
            key-positions = <7 8>;
            timeout-ms = <50>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            bindings = <&hm RGUI SEMI>, <&kp SQT>;

            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // Base alpha layer

        default_layer {
            bindings = <
  &kp Q  &kp W  &kp E  &kp R       &kp T             &kp Y                &kp U              &kp I                &kp O            &kp P
  &kp A  &kp S  &kp D  &kp F       &kp G             &kp H                &hm RIGHT_SHIFT J  &hm RIGHT_CONTROL K  &hm RIGHT_ALT L  &td0
  &kp Z  &kp X  &kp C  &kp V       &kp B             &kp N                &kp M              &kp COMMA            &kp DOT          &kp FSLH
                       &lt 1 BSPC  &mt LCMD SPACE    &mt RIGHT_GUI SPACE  &lt 2 RET
            >;
        };

        num_layer {
            bindings = <
  &trans  &trans    &kp UP    &trans     &trans    &kp PLUS   &kp N7  &kp N8  &kp N9  &kp KP_MULTIPLY
  &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans    &kp MINUS  &kp N4  &kp N5  &kp N6  &kp FSLH
  &trans  &trans    &trans    &trans     &trans    &kp N0     &kp N1  &kp N2  &kp N3  &kp DOT
                              &trans     &trans    &trans     &mo 3
            >;
        };

        sym_layer {
            bindings = <
  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &none   &none   &none  &none  &none
  &none     &none   &none     &none     &none        &none   &none   &none  &none  &none
  &none     &none   &none     &none     &none        &none   &none   &none  &none  &none
                              &mo 3     &trans       &trans  &trans
            >;
        };

        func_layer {
            bindings = <
  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5    &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &kp F11
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &kp F12
                          &trans  &trans    &trans  &trans
            >;
        };
    };
};
